using KonsolideRapor.WebServer.Base;
using Surat.Base.Model.Entities;
using Surat.Common.Data;
using Surat.Common.Security;
using Surat.Common.ViewModel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using System.Web.Script.Serialization;

namespace Surat.WebServer.Controllers
{
    public class ExceptionsController : KonsolideControllerBase
    {
        #region Constructor

        public ExceptionsController()
        {

        }

        #endregion

        #region Private Members

        #endregion

        #region Public Members

        #endregion

        #region Methods

<<<<<<< HEAD
        [ActionAttribute("Hata Kayıtları Sayfası", "Hata Kayıtları sayfasının görüntülenmesini sağlar ", KonsolideRapor.Common.Data.KonsolideRaporConstants.Application.KonsolideRaporSystemName, Surat.Common.Data.ActionType.Page)]
=======
        [ActionAttribute("Hata Sayfası", "Sayfanın görüntülenmesini sağlar.", Surat.Common.Data.Constants.Application.WebFrameworkSystemName, ActionType.Page)]
>>>>>>> 9f318357e77ee6bbdf36880cd229c0f00ece9ae7
        public ActionResult Index()
        {
            return View();
        }

<<<<<<< HEAD
        [ActionAttribute("Hata Kayıtlarının Çağrılması", "Sistemde oluşan tüm hata kayıtlarının getirilmesini sağlayan metod ", KonsolideRapor.Common.Data.KonsolideRaporConstants.Application.KonsolideRaporSystemName, Surat.Common.Data.ActionType.Action)]
=======
        [ActionAttribute("Hataları Getir", "Sistemde loglanan tüm hataları getirir.", Surat.Common.Data.Constants.Application.WebFrameworkSystemName, ActionType.Action)]
>>>>>>> 9f318357e77ee6bbdf36880cd229c0f00ece9ae7
        public JsonResult GetExceptions(int pageSize, int skip)
        {

            try
            {
                var exceptions = this.WebApplicationManager.Framework.Exception.GetExceptionsList();
                var total = exceptions.Count();
                var data = exceptions.OrderByDescending(m => m.Id).Skip(skip).Take(pageSize).ToList();
                return Json(new { total = total, data = data }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception exception)
            {
                Response.StatusCode = 500;
                return Json(new { Result = this.WebApplicationManager.GetGlobalizationKeyValue(this.WebApplicationManager.Framework.Context.SystemId, Constants.Message.OperationNotCompleted) + " " + this.PublishException(exception) });
            }
        }

        #endregion
    }
}
